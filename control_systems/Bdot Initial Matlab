clearvars
close all
clc

%% Parameters Characteristics
% Test values for bVec
bx = 1.0;  
by = 2.0;
bz = 3.0;

%these are test values for angRot
ax = 4.0;
ay = 5.0; 
az = 6.0;

%this is a mock k value for test calculations
k = 0.5;

%bVec is the instantaneous magnetic field vectors of the Earth
  %this is given by magnetometer 
bVec = [ bx, by ,bz];

%bmag is the magnitude of bVec
bmag = (bx^2 + by^2 + bz^2)^(1/2); 

%negAngRot is the angular rotation of the satellite multiplied by -1 
  %this is given by gyroscope
negAngRot = [-ax, -ay, -az]; 

%bdot is the time derivative of bmag 
bdot = cross(negAngRot, bVec);
fprintf("This is the calculated B-Dot vector; %i\n  ", bdot);

%this is the function for cross product, but apparently it's unnecessary. python seems to already do it??? 
  %def cross(a, b):
  %  c = [a[1]*b[2] - a[2]*b[1], 
  %       a[2]*b[0] - a[0]*b[2], 
  %       a[0]*b[1] - a[1]*b[0]] 
  %  return c
  
%this is the magnetic dipole we need to generate from the magnetorquers 
magDipole = -1.0*k * bdot;
fprintf("This is the magnetic dipole vector: %i\n  ", magDipole);
 
 
%This is going to be used to calculate stuff with the M = i * n * s equation

%This is for the magnetorquer for the x-axis
sx = 46.0;       %Sx is the surface area enclosed by a turn of the coil's spiral in meters^2 
nx = 300.0;      %nx is the number of spires of the coil 
ix = magDipole(1)/(nx * sx);    %current needed to push through magnetorquer on x-axis
fprintf("This is the current needed to push through the magnetorquer for the x-axis: %i\n  ", ix); 

%This is for the magnetorquer for the y-axis
sy = 37.0;       %Sy is the surface area enclosed by a turn of the coil's spiral in meters^2 
ny = 320.0;      %ny is the number of spires of the coil 
iy = magDipole(1)/(ny * sy);    %current needed to push through magnetorquer on x-axis
fprintf("This is the current needed to push through the magnetorquer for the y-axis: %i\n  ", iy); 

%This is for the magnetorquer for the z-axis
sz = 46.0;       %Sz is the surface area enclosed by a turn of the coil's spiral in meters^2 
nz = 340.0;      %nz is the number of spires of the coil 
iz = magDipole(1)/(nz * sz);    %current needed to push through magnetorquer on z-axis
fprintf("This is the current needed to push through the magnetorquer for the z-axis: %i\n  ", iz); 
 
 
%this section calculates the control torque 

torque = cross(magDipole, bVec);
fprintf("This is the control torque generated by the magnetorquers: %i\n  ", torque);

%^The above is the code for the initial conditions of the bdot algorithm.
